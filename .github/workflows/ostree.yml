name: OSTree build

on:
  workflow_call:
    inputs:
      variant:
        required: true
        type: string

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        arch:
          - x86_64
          - aarch64
    runs-on: ${{ matrix.arch == 'aarch64' && 'ARM64' || 'ubuntu-latest' }}
    container:
      image: ghcr.io/terrapkg/builder:f38
      options: --cap-add=SYS_ADMIN --privileged
    steps:
      # Thanks GHA for not having a replace expression!
      - name: Get variant safe-name
        run: echo "VARIANT_SAFE_NAME=$(echo "${{inputs.variant}}" | tr / -)" >> $GITHUB_ENV

      - name: DNF Cache
        uses: actions/cache@v3
        with:
          path: /var/cache/dnf
          key: dnf-${{ inputs.variant }}-${{ matrix.arch }}

      - name: OSTree Cache
        uses: actions/cache@v3
        with:
          path: cache
          key: ostree-${{ inputs.variant }}-${{ matrix.arch }}

      - name: Install dependencies
        run: |
          sudo dnf5 install -y podman moby-engine rpm-ostree melody just python3-pip pkg-config wget ostree ostree-devel rpm-ostree git hfsplus-tools flatpak dbus dbus-daemon rpmdevtools make mock selinux-policy python3-pip jq @development-tools gcc cairo-devel python3-devel 'pkgconfig(gobject-introspection-1.0)' 'pkgconfig(cairo-gobject)' 'dnf-command(config-manager)'

      - name: Install python dependencies
        run: pip install yq

      - name: Checkout
        uses: actions/checkout@v3

      - name: Build OSTree
        run: just build-image ${{ inputs.variant }}

      - name: Upload OCI archive as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.VARIANT_SAFE_NAME }}-${{ matrix.arch }}-oci
          path: images/*
  publish:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      # Thanks GHA for not having a replace expression!
      - name: Get variant safe-name
        run: echo "VARIANT_SAFE_NAME=$(echo "${{inputs.variant}}" | tr / -)" >> $GITHUB_ENV

      - name: Get image tag
        run: echo "IMAGE_TAG=${{ startsWith(inputs.variant, 'ultramarine') && '38' || '1' }}" >> $GITHUB_ENV

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y buildah

      - name: Log in to ghcr.io
        uses: redhat-actions/podman-login@v1
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io

      - name: Download OCI archive (x86_64)
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.VARIANT_SAFE_NAME }}-x86_64-oci

      - name: Download OCI archive (aarch64)
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.VARIANT_SAFE_NAME }}-aarch64-oci

      - name: Publish to registry
        run: |
          buildah manifest create manifest
          buildah manifest add manifest oci-archive:$VARIANT_SAFE_NAME-{x86_64,aarch64}.tar
          buildah manifest push --all -f v2s2 example docker://ghcr.io/ultramarine-linux/$VARIANT_SAFE_NAME:$IMAGE_TAG
